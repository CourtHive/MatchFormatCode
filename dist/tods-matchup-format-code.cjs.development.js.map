{"version":3,"file":"tods-matchup-format-code.cjs.development.js","sources":["../src/index.js"],"sourcesContent":["/*\n * TODO: if the final set is NOT different then don't include in string\n */\n\nconst SET = \"SET\";\nconst NOAD = \"NOAD\";\nconst TIMED = \"timed\";\nconst FINAL = \"final\";\nconst NORMAL = \"normal\";\nconst setTypes = {\n  S: NORMAL,\n  F: FINAL\n};\n\nconst matchUpFormatCode = (function() {\n  const fx = {};\n\n  fx.stringify = matchformatobject => {\n    if (matchformatobject && typeof matchformatobject === \"object\") {\n      if (matchformatobject.timed && !isNaN(matchformatobject.minutes))\n        return timedSetFormat(matchformatobject);\n      if (matchformatobject.bestOf && matchformatobject.setFormat)\n        return getSetFormat(matchformatobject);\n    }\n  };\n\n  function timedSetFormat(matchformatobject) {\n    return `T${matchformatobject.minutes}`;\n  }\n\n  function getSetFormat(matchformatobject) {\n    const bestOfValue = getNumber(matchformatobject.bestOf);\n    const bestOfCode = (bestOfValue && `${SET}${bestOfValue}`) || \"\";\n    const setCountValue = stringifySet(matchformatobject.setFormat);\n    const setCode = (setCountValue && `S:${setCountValue}`) || \"\";\n    const finalSetCountValue = stringifySet(matchformatobject.finalSetFormat);\n    const finalSetCode =\n      (bestOfValue > 1 &&\n        finalSetCountValue &&\n        !finalSetCountValue.invalid &&\n        `F:${finalSetCountValue}`) ||\n      \"\";\n    const valid =\n      bestOfCode &&\n      setCountValue &&\n      !setCountValue.invalid &&\n      (!finalSetCountValue || !finalSetCountValue.invalid);\n\n    if (valid) {\n      return [bestOfCode, setCode, finalSetCode].filter(f => f).join(\"-\");\n    }\n  }\n\n  function stringifySet(setObject) {\n    if (setObject) {\n      if (typeof setObject === \"object\") {\n        if (setObject.timed) return timedSetFormat(setObject);\n        if (setObject.tiebreakSet) return tiebreakFormat(setObject.tiebreakSet);\n        const setToValue = getNumber(setObject.setTo);\n        if (setToValue) {\n          const NoAD = (setObject.NoAD && NOAD) || \"\";\n          const setTiebreakValue = tiebreakFormat(setObject.tiebreakFormat);\n          const setTiebreakCode =\n            (setTiebreakValue &&\n              !setTiebreakValue.invalid &&\n              `/${setTiebreakValue}`) ||\n            \"\";\n          const tiebreakAtValue = getNumber(setObject.tiebreakAt);\n          const tiebreakAtCode =\n            (tiebreakAtValue &&\n              tiebreakAtValue !== setToValue &&\n              `@${tiebreakAtValue}`) ||\n            \"\";\n          const valid = !setTiebreakValue || !setTiebreakValue.invalid;\n          if (valid) {\n            return `${setToValue}${NoAD}${setTiebreakCode}${tiebreakAtCode}`;\n          } else {\n            return { invalid: true };\n          }\n        } else {\n          return { invalid: true };\n        }\n      }\n    }\n  }\n\n  function tiebreakFormat(tieobject) {\n    if (tieobject) {\n      if (typeof tieobject === \"object\" && !tieobject.tiebreakTo) {\n        return \"\";\n      } else if (\n        typeof tieobject === \"object\" &&\n        getNumber(tieobject.tiebreakTo)\n      ) {\n        return `TB${tieobject.tiebreakTo}${tieobject.NoAD ? NOAD : \"\"}`;\n      } else {\n        return { invalid: true };\n      }\n    }\n  }\n\n  fx.parse = matchformatcode => {\n    if (matchformatcode && typeof matchformatcode === \"string\") {\n      const type =\n        matchformatcode.indexOf(\"T\") === 0\n          ? \"timed\"\n          : matchformatcode.indexOf(SET) === 0\n          ? SET\n          : \"\";\n      if (type === TIMED) return parseTimedSet(matchformatcode);\n      if (type === SET) return setsMatch(matchformatcode);\n    }\n  };\n\n  function setsMatch(formatstring) {\n    const parts = formatstring.split(\"-\");\n\n    const bestOf = getNumber(parts[0].slice(3));\n    const setFormat = parts && parseSetFormat(parts[1]);\n    const finalSetFormat = parts && parseSetFormat(parts[2]);\n    const validBestOf = bestOf && bestOf < 6;\n    const validFinalSet =\n      !parts[2] || (finalSetFormat && !finalSetFormat.invalid);\n    const validSetsFormat = setFormat && !setFormat.invalid;\n\n    const result = { bestOf, setFormat };\n    if (finalSetFormat) result.finalSetFormat = finalSetFormat;\n    if (validBestOf && validSetsFormat && validFinalSet) return result;\n  }\n\n  function parseSetFormat(formatstring) {\n    if (formatstring && formatstring[1] === \":\") {\n      const parts = formatstring.split(\":\");\n      const setType = setTypes[parts[0]];\n      const setFormatString = parts[1];\n      if (setType && setFormatString) {\n        const tiebreakSet = setFormatString.indexOf(\"TB\") === 0;\n        if (tiebreakSet)\n          return { tiebreakSet: parseTiebreakFormat(setFormatString) };\n        const timedSet = setFormatString.indexOf(\"T\") === 0;\n        if (timedSet) return parseTimedSet(setFormatString);\n        const parts = formatstring.match(/^[FS]{1}:(\\d+)([A-Za-z]*)/);\n        const NoAD = (parts && isNoAD(parts[2])) || false;\n        const validNoAD = !parts || !parts[2] || NoAD;\n        const setTo = parts && getNumber(parts[1]);\n        const tiebreakAtValue = parseTiebreakAt(setFormatString);\n        const validTiebreakAt =\n          !tiebreakAtValue || (tiebreakAtValue && !tiebreakAtValue.invalid);\n        const tiebreakAt = (validTiebreakAt && tiebreakAtValue) || setTo;\n        const tiebreakFormat = parseTiebreakFormat(\n          setFormatString.split(\"/\")[1]\n        );\n        const validTiebreak = !tiebreakFormat || !tiebreakFormat.invalid;\n        const result = { setTo };\n        if (NoAD) result.NoAD = true;\n        if (tiebreakFormat) {\n          result.tiebreakFormat = tiebreakFormat;\n          result.tiebreakAt = tiebreakAt;\n        } else {\n          result.noTiebreak = true;\n        }\n        return (\n          (setTo &&\n            validNoAD &&\n            validTiebreak &&\n            validTiebreakAt &&\n            result) || { invalid: true }\n        );\n      }\n    }\n  }\n\n  function parseTiebreakAt(setFormatString) {\n    const tiebreakAtValue =\n      setFormatString &&\n      setFormatString.indexOf(\"@\") > 0 &&\n      setFormatString.split(\"@\");\n    if (tiebreakAtValue) {\n      const tiebreakAt = getNumber(tiebreakAtValue[1]);\n      return tiebreakAt || { invalid: true };\n    }\n  }\n\n  function parseTiebreakFormat(formatstring) {\n    if (formatstring) {\n      if (formatstring.indexOf(\"TB\") === 0) {\n        const parts = formatstring.match(/^TB(\\d+)([A-Za-z]*)/);\n        const tiebreakToString = parts && parts[1];\n        const NoAD = parts && isNoAD(parts[2]);\n        const validNoAD = !parts || !parts[2] || NoAD;\n        const tiebreakTo = getNumber(tiebreakToString);\n        if (tiebreakTo && validNoAD) {\n          const result = { tiebreakTo };\n          if (NoAD) result.NoAD = true;\n          return result;\n        } else {\n          return { invalid: true };\n        }\n      } else {\n        return { invalid: true };\n      }\n    }\n  }\n\n  function parseTimedSet(formatstring) {\n    const timestring = formatstring.slice(1);\n    const minutes = getNumber(timestring);\n    if (minutes) return { timed: true, minutes };\n  }\n\n  function isNoAD(formatstring) {\n    return formatstring && formatstring.indexOf(NOAD) >= 0;\n  }\n\n  function getNumber(formatstring) {\n    return !isNaN(Number(formatstring)) && Number(formatstring);\n  }\n\n  return fx;\n})();\n\nexports.matchUpFormatCode = matchUpFormatCode;\n"],"names":["SET","NOAD","TIMED","FINAL","NORMAL","setTypes","S","F","matchUpFormatCode","fx","stringify","matchformatobject","timed","isNaN","minutes","timedSetFormat","bestOf","setFormat","getSetFormat","bestOfValue","getNumber","bestOfCode","setCountValue","stringifySet","setCode","finalSetCountValue","finalSetFormat","finalSetCode","invalid","valid","filter","f","join","setObject","tiebreakSet","tiebreakFormat","setToValue","setTo","NoAD","setTiebreakValue","setTiebreakCode","tiebreakAtValue","tiebreakAt","tiebreakAtCode","tieobject","tiebreakTo","parse","matchformatcode","type","indexOf","parseTimedSet","setsMatch","formatstring","parts","split","slice","parseSetFormat","validBestOf","validFinalSet","validSetsFormat","result","setType","setFormatString","parseTiebreakFormat","timedSet","match","isNoAD","validNoAD","parseTiebreakAt","validTiebreakAt","validTiebreak","noTiebreak","tiebreakToString","timestring","Number","exports"],"mappings":";;AAAA;;;AAIA,MAAMA,GAAG,GAAG,KAAZ;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,CAAC,EAAEF,MADY;AAEfG,EAAAA,CAAC,EAAEJ;AAFY,CAAjB;;AAKA,MAAMK,iBAAiB,gBAAI,YAAW;AACpC,QAAMC,EAAE,GAAG,EAAX;;AAEAA,EAAAA,EAAE,CAACC,SAAH,GAAeC,iBAAiB,IAAI;AAClC,QAAIA,iBAAiB,IAAI,OAAOA,iBAAP,KAA6B,QAAtD,EAAgE;AAC9D,UAAIA,iBAAiB,CAACC,KAAlB,IAA2B,CAACC,KAAK,CAACF,iBAAiB,CAACG,OAAnB,CAArC,EACE,OAAOC,cAAc,CAACJ,iBAAD,CAArB;AACF,UAAIA,iBAAiB,CAACK,MAAlB,IAA4BL,iBAAiB,CAACM,SAAlD,EACE,OAAOC,YAAY,CAACP,iBAAD,CAAnB;AACH;AACF,GAPD;;AASA,WAASI,cAAT,CAAwBJ,iBAAxB,EAA2C;AACzC,WAAQ,IAAGA,iBAAiB,CAACG,OAAQ,EAArC;AACD;;AAED,WAASI,YAAT,CAAsBP,iBAAtB,EAAyC;AACvC,UAAMQ,WAAW,GAAGC,SAAS,CAACT,iBAAiB,CAACK,MAAnB,CAA7B;AACA,UAAMK,UAAU,GAAIF,WAAW,IAAK,GAAEnB,GAAI,GAAEmB,WAAY,EAArC,IAA2C,EAA9D;AACA,UAAMG,aAAa,GAAGC,YAAY,CAACZ,iBAAiB,CAACM,SAAnB,CAAlC;AACA,UAAMO,OAAO,GAAIF,aAAa,IAAK,KAAIA,aAAc,EAArC,IAA2C,EAA3D;AACA,UAAMG,kBAAkB,GAAGF,YAAY,CAACZ,iBAAiB,CAACe,cAAnB,CAAvC;AACA,UAAMC,YAAY,GACfR,WAAW,GAAG,CAAd,IACCM,kBADD,IAEC,CAACA,kBAAkB,CAACG,OAFrB,IAGE,KAAIH,kBAAmB,EAH1B,IAIA,EALF;AAMA,UAAMI,KAAK,GACTR,UAAU,IACVC,aADA,IAEA,CAACA,aAAa,CAACM,OAFf,KAGC,CAACH,kBAAD,IAAuB,CAACA,kBAAkB,CAACG,OAH5C,CADF;;AAMA,QAAIC,KAAJ,EAAW;AACT,aAAO,CAACR,UAAD,EAAaG,OAAb,EAAsBG,YAAtB,EAAoCG,MAApC,CAA2CC,CAAC,IAAIA,CAAhD,EAAmDC,IAAnD,CAAwD,GAAxD,CAAP;AACD;AACF;;AAED,WAAST,YAAT,CAAsBU,SAAtB,EAAiC;AAC/B,QAAIA,SAAJ,EAAe;AACb,UAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,YAAIA,SAAS,CAACrB,KAAd,EAAqB,OAAOG,cAAc,CAACkB,SAAD,CAArB;AACrB,YAAIA,SAAS,CAACC,WAAd,EAA2B,OAAOC,cAAc,CAACF,SAAS,CAACC,WAAX,CAArB;AAC3B,cAAME,UAAU,GAAGhB,SAAS,CAACa,SAAS,CAACI,KAAX,CAA5B;;AACA,YAAID,UAAJ,EAAgB;AACd,gBAAME,IAAI,GAAIL,SAAS,CAACK,IAAV,IAAkBrC,IAAnB,IAA4B,EAAzC;AACA,gBAAMsC,gBAAgB,GAAGJ,cAAc,CAACF,SAAS,CAACE,cAAX,CAAvC;AACA,gBAAMK,eAAe,GAClBD,gBAAgB,IACf,CAACA,gBAAgB,CAACX,OADnB,IAEE,IAAGW,gBAAiB,EAFvB,IAGA,EAJF;AAKA,gBAAME,eAAe,GAAGrB,SAAS,CAACa,SAAS,CAACS,UAAX,CAAjC;AACA,gBAAMC,cAAc,GACjBF,eAAe,IACdA,eAAe,KAAKL,UADrB,IAEE,IAAGK,eAAgB,EAFtB,IAGA,EAJF;AAKA,gBAAMZ,KAAK,GAAG,CAACU,gBAAD,IAAqB,CAACA,gBAAgB,CAACX,OAArD;;AACA,cAAIC,KAAJ,EAAW;AACT,mBAAQ,GAAEO,UAAW,GAAEE,IAAK,GAAEE,eAAgB,GAAEG,cAAe,EAA/D;AACD,WAFD,MAEO;AACL,mBAAO;AAAEf,cAAAA,OAAO,EAAE;AAAX,aAAP;AACD;AACF,SApBD,MAoBO;AACL,iBAAO;AAAEA,YAAAA,OAAO,EAAE;AAAX,WAAP;AACD;AACF;AACF;AACF;;AAED,WAASO,cAAT,CAAwBS,SAAxB,EAAmC;AACjC,QAAIA,SAAJ,EAAe;AACb,UAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiC,CAACA,SAAS,CAACC,UAAhD,EAA4D;AAC1D,eAAO,EAAP;AACD,OAFD,MAEO,IACL,OAAOD,SAAP,KAAqB,QAArB,IACAxB,SAAS,CAACwB,SAAS,CAACC,UAAX,CAFJ,EAGL;AACA,eAAQ,KAAID,SAAS,CAACC,UAAW,GAAED,SAAS,CAACN,IAAV,GAAiBrC,IAAjB,GAAwB,EAAG,EAA9D;AACD,OALM,MAKA;AACL,eAAO;AAAE2B,UAAAA,OAAO,EAAE;AAAX,SAAP;AACD;AACF;AACF;;AAEDnB,EAAAA,EAAE,CAACqC,KAAH,GAAWC,eAAe,IAAI;AAC5B,QAAIA,eAAe,IAAI,OAAOA,eAAP,KAA2B,QAAlD,EAA4D;AAC1D,YAAMC,IAAI,GACRD,eAAe,CAACE,OAAhB,CAAwB,GAAxB,MAAiC,CAAjC,GACI,OADJ,GAEIF,eAAe,CAACE,OAAhB,CAAwBjD,GAAxB,MAAiC,CAAjC,GACAA,GADA,GAEA,EALN;AAMA,UAAIgD,IAAI,KAAK9C,KAAb,EAAoB,OAAOgD,aAAa,CAACH,eAAD,CAApB;AACpB,UAAIC,IAAI,KAAKhD,GAAb,EAAkB,OAAOmD,SAAS,CAACJ,eAAD,CAAhB;AACnB;AACF,GAXD;;AAaA,WAASI,SAAT,CAAmBC,YAAnB,EAAiC;AAC/B,UAAMC,KAAK,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAd;AAEA,UAAMtC,MAAM,GAAGI,SAAS,CAACiC,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,CAAf,CAAD,CAAxB;AACA,UAAMtC,SAAS,GAAGoC,KAAK,IAAIG,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,CAAzC;AACA,UAAM3B,cAAc,GAAG2B,KAAK,IAAIG,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,UAAMI,WAAW,GAAGzC,MAAM,IAAIA,MAAM,GAAG,CAAvC;AACA,UAAM0C,aAAa,GACjB,CAACL,KAAK,CAAC,CAAD,CAAN,IAAc3B,cAAc,IAAI,CAACA,cAAc,CAACE,OADlD;AAEA,UAAM+B,eAAe,GAAG1C,SAAS,IAAI,CAACA,SAAS,CAACW,OAAhD;AAEA,UAAMgC,MAAM,GAAG;AAAE5C,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAf;AACA,QAAIS,cAAJ,EAAoBkC,MAAM,CAAClC,cAAP,GAAwBA,cAAxB;AACpB,QAAI+B,WAAW,IAAIE,eAAf,IAAkCD,aAAtC,EAAqD,OAAOE,MAAP;AACtD;;AAED,WAASJ,cAAT,CAAwBJ,YAAxB,EAAsC;AACpC,QAAIA,YAAY,IAAIA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAAxC,EAA6C;AAC3C,YAAMC,KAAK,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAd;AACA,YAAMO,OAAO,GAAGxD,QAAQ,CAACgD,KAAK,CAAC,CAAD,CAAN,CAAxB;AACA,YAAMS,eAAe,GAAGT,KAAK,CAAC,CAAD,CAA7B;;AACA,UAAIQ,OAAO,IAAIC,eAAf,EAAgC;AAC9B,cAAM5B,WAAW,GAAG4B,eAAe,CAACb,OAAhB,CAAwB,IAAxB,MAAkC,CAAtD;AACA,YAAIf,WAAJ,EACE,OAAO;AAAEA,UAAAA,WAAW,EAAE6B,mBAAmB,CAACD,eAAD;AAAlC,SAAP;AACF,cAAME,QAAQ,GAAGF,eAAe,CAACb,OAAhB,CAAwB,GAAxB,MAAiC,CAAlD;AACA,YAAIe,QAAJ,EAAc,OAAOd,aAAa,CAACY,eAAD,CAApB;AACd,cAAMT,KAAK,GAAGD,YAAY,CAACa,KAAb,CAAmB,2BAAnB,CAAd;AACA,cAAM3B,IAAI,GAAIe,KAAK,IAAIa,MAAM,CAACb,KAAK,CAAC,CAAD,CAAN,CAAhB,IAA+B,KAA5C;AACA,cAAMc,SAAS,GAAG,CAACd,KAAD,IAAU,CAACA,KAAK,CAAC,CAAD,CAAhB,IAAuBf,IAAzC;AACA,cAAMD,KAAK,GAAGgB,KAAK,IAAIjC,SAAS,CAACiC,KAAK,CAAC,CAAD,CAAN,CAAhC;AACA,cAAMZ,eAAe,GAAG2B,eAAe,CAACN,eAAD,CAAvC;AACA,cAAMO,eAAe,GACnB,CAAC5B,eAAD,IAAqBA,eAAe,IAAI,CAACA,eAAe,CAACb,OAD3D;AAEA,cAAMc,UAAU,GAAI2B,eAAe,IAAI5B,eAApB,IAAwCJ,KAA3D;AACA,cAAMF,cAAc,GAAG4B,mBAAmB,CACxCD,eAAe,CAACR,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CADwC,CAA1C;AAGA,cAAMgB,aAAa,GAAG,CAACnC,cAAD,IAAmB,CAACA,cAAc,CAACP,OAAzD;AACA,cAAMgC,MAAM,GAAG;AAAEvB,UAAAA;AAAF,SAAf;AACA,YAAIC,IAAJ,EAAUsB,MAAM,CAACtB,IAAP,GAAc,IAAd;;AACV,YAAIH,cAAJ,EAAoB;AAClByB,UAAAA,MAAM,CAACzB,cAAP,GAAwBA,cAAxB;AACAyB,UAAAA,MAAM,CAAClB,UAAP,GAAoBA,UAApB;AACD,SAHD,MAGO;AACLkB,UAAAA,MAAM,CAACW,UAAP,GAAoB,IAApB;AACD;;AACD,eACGlC,KAAK,IACJ8B,SADD,IAECG,aAFD,IAGCD,eAHD,IAICT,MAJF,IAIa;AAAEhC,UAAAA,OAAO,EAAE;AAAX,SALf;AAOD;AACF;AACF;;AAED,WAASwC,eAAT,CAAyBN,eAAzB,EAA0C;AACxC,UAAMrB,eAAe,GACnBqB,eAAe,IACfA,eAAe,CAACb,OAAhB,CAAwB,GAAxB,IAA+B,CAD/B,IAEAa,eAAe,CAACR,KAAhB,CAAsB,GAAtB,CAHF;;AAIA,QAAIb,eAAJ,EAAqB;AACnB,YAAMC,UAAU,GAAGtB,SAAS,CAACqB,eAAe,CAAC,CAAD,CAAhB,CAA5B;AACA,aAAOC,UAAU,IAAI;AAAEd,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;AACF;;AAED,WAASmC,mBAAT,CAA6BX,YAA7B,EAA2C;AACzC,QAAIA,YAAJ,EAAkB;AAChB,UAAIA,YAAY,CAACH,OAAb,CAAqB,IAArB,MAA+B,CAAnC,EAAsC;AACpC,cAAMI,KAAK,GAAGD,YAAY,CAACa,KAAb,CAAmB,qBAAnB,CAAd;AACA,cAAMO,gBAAgB,GAAGnB,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAvC;AACA,cAAMf,IAAI,GAAGe,KAAK,IAAIa,MAAM,CAACb,KAAK,CAAC,CAAD,CAAN,CAA5B;AACA,cAAMc,SAAS,GAAG,CAACd,KAAD,IAAU,CAACA,KAAK,CAAC,CAAD,CAAhB,IAAuBf,IAAzC;AACA,cAAMO,UAAU,GAAGzB,SAAS,CAACoD,gBAAD,CAA5B;;AACA,YAAI3B,UAAU,IAAIsB,SAAlB,EAA6B;AAC3B,gBAAMP,MAAM,GAAG;AAAEf,YAAAA;AAAF,WAAf;AACA,cAAIP,IAAJ,EAAUsB,MAAM,CAACtB,IAAP,GAAc,IAAd;AACV,iBAAOsB,MAAP;AACD,SAJD,MAIO;AACL,iBAAO;AAAEhC,YAAAA,OAAO,EAAE;AAAX,WAAP;AACD;AACF,OAbD,MAaO;AACL,eAAO;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAAP;AACD;AACF;AACF;;AAED,WAASsB,aAAT,CAAuBE,YAAvB,EAAqC;AACnC,UAAMqB,UAAU,GAAGrB,YAAY,CAACG,KAAb,CAAmB,CAAnB,CAAnB;AACA,UAAMzC,OAAO,GAAGM,SAAS,CAACqD,UAAD,CAAzB;AACA,QAAI3D,OAAJ,EAAa,OAAO;AAAEF,MAAAA,KAAK,EAAE,IAAT;AAAeE,MAAAA;AAAf,KAAP;AACd;;AAED,WAASoD,MAAT,CAAgBd,YAAhB,EAA8B;AAC5B,WAAOA,YAAY,IAAIA,YAAY,CAACH,OAAb,CAAqBhD,IAArB,KAA8B,CAArD;AACD;;AAED,WAASmB,SAAT,CAAmBgC,YAAnB,EAAiC;AAC/B,WAAO,CAACvC,KAAK,CAAC6D,MAAM,CAACtB,YAAD,CAAP,CAAN,IAAgCsB,MAAM,CAACtB,YAAD,CAA7C;AACD;;AAED,SAAO3C,EAAP;AACD,CA7MyB,EAA1B;;AA+MAkE,OAAO,CAACnE,iBAAR,GAA4BA,iBAA5B"}